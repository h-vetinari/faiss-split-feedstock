From d24cc2832683e42609d9620bbb4bc9c3a77487e6 Mon Sep 17 00:00:00 2001
From: "H. Vetinari" <h.vetinari@gmx.com>
Date: Fri, 5 Mar 2021 09:54:40 +0100
Subject: [PATCH 18/18] deprecate non-portable Vector names and replace with
 clearer nomenclature

---
 faiss/python/__init__.py    | 94 ++++++++++++++++++++++++++++++-------
 faiss/python/swigfaiss.swig | 24 +++++-----
 tests/test_build_blocks.py  |  6 +--
 tests/test_oom_exception.py |  2 +-
 4 files changed, 91 insertions(+), 35 deletions(-)

diff --git a/faiss/python/__init__.py b/faiss/python/__init__.py
index 315871aa..235c129a 100644
--- a/faiss/python/__init__.py
+++ b/faiss/python/__init__.py
@@ -5,13 +5,14 @@
 
 #@nolint
 
-# not linting this file because it imports * form swigfaiss, which
+# not linting this file because it imports * from swigfaiss, which
 # causes a ton of useless warnings.
 
 import numpy as np
 import sys
 import inspect
 import array
+import warnings
 
 # We import * so that the symbol foo can be accessed as faiss.foo.
 from .loader import *
@@ -431,6 +432,47 @@ for symbol in dir(this_module):
         if issubclass(the_class, ParameterSpace):
             handle_ParameterSpace(the_class)
 
+###########################################
+# Utility to add a deprecation warning to
+# classes from the SWIG interface
+###########################################
+
+def _make_deprecated_swig_class(deprecated_name, base_name):
+    """
+    Dynamically construct deprecated classes as wrappers around renamed ones
+
+    The deprecation warning added in their __new__-method will trigger upon
+    construction of an instance of the class, but only once per session.
+
+    We do this here (in __init__.py) because the base classes are defined in
+    the SWIG interface, making it cumbersome to add the deprecation there.
+
+    Parameters
+    ----------
+    deprecated_name : string
+        Name of the class to be deprecated; _not_ present in SWIG interface.
+    base_name : string
+        Name of the class that is replacing deprecated_name; must already be
+        imported into the current namespace.
+
+    Returns
+    -------
+    None
+        However, the deprecated class gets added to the faiss namespace
+    """
+    base_class = globals()[base_name]
+    def new_meth(cls, *args, **kwargs):
+        msg = f"The class faiss.{deprecated_name} is deprecated in favour of faiss.{base_name}!"
+        warnings.warn(msg, DeprecationWarning, stacklevel=2)
+        instance = super(base_class, cls).__new__(cls, *args, **kwargs)
+        return instance
+
+    # three-argument version of "type" uses (name, tuple-of-bases, dict-of-attributes)
+    klazz = type(deprecated_name, (base_class,), {"__new__": new_meth})
+
+    # this ends up adding the class to the "faiss" namespace, in a way that it
+    # is available both through "import faiss" and "from faiss import *"
+    globals()[deprecated_name] = klazz
 
 ###########################################
 # Add Python references to objects
@@ -523,7 +565,7 @@ def index_cpu_to_gpu_multiple_py(resources, index, co=None, gpus=None):
     if gpus is None:
         gpus = range(len(resources))
     vres = GpuResourcesVector()
-    vdev = IntVector()
+    vdev = Int32Vector()
     for i, res in zip(gpus, resources):
         vdev.push_back(i)
         vres.push_back(res)
@@ -635,23 +677,43 @@ def knn_gpu(res, xb, xq, k, D=None, I=None, metric=METRIC_L2):
 # numpy array / std::vector conversions
 ###########################################
 
-# mapping from vector names in swigfaiss.swig and the numpy dtype names
-vector_name_map = {
-    'Float': 'float32',
-    'Byte': 'uint8',
-    'Char': 'int8',
-    'Uint64': 'uint64',
-    'LongLong': 'int64',
-    'Int': 'int32',
-    'Double': 'float64'
+sizeof_long = array.array('l').itemsize
+deprecated_name_map = {
+    # deprecated: replacement
+    'Float': 'Float32',
+    'Double': 'Float64',
+    'Char': 'Int8',
+    'Int': 'Int32',
+    'Long': 'Int32' if sizeof_long == 4 else 'Int64',
+    'LongLong': 'Int64',
+    'Byte': 'UInt8',
+    # previously misspelled variant
+    'Uint64': 'UInt64',
 }
 
-sizeof_long = array.array('l').itemsize
-if sizeof_long == 4:
-    vector_name_map["Long"] = 'int32'
-elif sizeof_long == 8:
-    vector_name_map["Long"] = 'int64'
+for depr_prefix, base_prefix in deprecated_name_map.items():
+    _make_deprecated_swig_class(depr_prefix + "Vector", base_prefix + "Vector")
+
+    # same for the three legacy *VectorVector classes
+    if depr_prefix in ['Float', 'Long', 'Byte']:
+        _make_deprecated_swig_class(depr_prefix + "VectorVector",
+                                    base_prefix + "VectorVector")
 
+# mapping from vector names in swigfaiss.swig and the numpy dtype names
+# TODO: once deprecated classes are removed, remove the dict and just use .lower() below
+vector_name_map = {
+    'Float32': 'float32',
+    'Float64': 'float64',
+    'Int8': 'int8',
+    'Int16': 'int16',
+    'Int32': 'int32',
+    'Int64': 'int64',
+    'UInt8': 'uint8',
+    'UInt16': 'uint16',
+    'UInt32': 'uint32',
+    'UInt64': 'uint64',
+    **{k: v.lower() for k, v in deprecated_name_map.items()}
+}
 
 
 def vector_to_array(v):
diff --git a/faiss/python/swigfaiss.swig b/faiss/python/swigfaiss.swig
index 3086ffab..5f9302d3 100644
--- a/faiss/python/swigfaiss.swig
+++ b/faiss/python/swigfaiss.swig
@@ -200,23 +200,21 @@ namespace std {
 %include <std_shared_ptr.i>
 
 // primitive array types
-%template(FloatVector) std::vector<float>;
-%template(DoubleVector) std::vector<double>;
-%template(ByteVector) std::vector<uint8_t>;
-%template(CharVector) std::vector<char>;
+%template(Float32Vector) std::vector<float>;
+%template(Float64Vector) std::vector<double>;
+%template(Int8Vector) std::vector<int8_t>;
 %template(Int16Vector) std::vector<int16_t>;
-// consider renaming to Int32Vector / Int64Vector
-%template(IntVector) std::vector<int>;
-%template(LongVector) std::vector<int64_t>;
-// TODO: deprecate/remove LongLongVector
-%template(LongLongVector) std::vector<int64_t>;
+%template(Int32Vector) std::vector<int32_t>;
+%template(Int64Vector) std::vector<int64_t>;
+%template(UInt8Vector) std::vector<uint8_t>;
 %template(UInt16Vector) std::vector<uint16_t>;
 %template(UInt32Vector) std::vector<uint32_t>;
-%template(Uint64Vector) std::vector<uint64_t>;
+%template(UInt64Vector) std::vector<uint64_t>;
 
-%template(FloatVectorVector) std::vector<std::vector<float> >;
-%template(ByteVectorVector) std::vector<std::vector<unsigned char> >;
-%template(LongVectorVector) std::vector<std::vector<int64_t> >;
+%template(Float32VectorVector) std::vector<std::vector<float> >;
+%template(UInt8VectorVector) std::vector<std::vector<uint8_t> >;
+%template(Int32VectorVector) std::vector<std::vector<int32_t> >;
+%template(Int64VectorVector) std::vector<std::vector<int64_t> >;
 %template(VectorTransformVector) std::vector<faiss::VectorTransform*>;
 %template(OperatingPointVector) std::vector<faiss::OperatingPoint>;
 %template(InvertedListsPtrVector) std::vector<faiss::InvertedLists*>;
diff --git a/tests/test_build_blocks.py b/tests/test_build_blocks.py
index dd6b5961..76135d9c 100644
--- a/tests/test_build_blocks.py
+++ b/tests/test_build_blocks.py
@@ -614,11 +614,7 @@ class TestSWIGWrap(unittest.TestCase):
 
     def test_int64(self):
         # see https://github.com/facebookresearch/faiss/issues/1529
-        sizeof_long = array.array("l").itemsize
-        if sizeof_long in (4, 8):
-            v = faiss.LongVector()
-        else:
-            raise AssertionError("weird long size")
+        v = faiss.Int64Vector()
 
         for i in range(10):
             v.push_back(i)
diff --git a/tests/test_oom_exception.py b/tests/test_oom_exception.py
index 341004d9..e5300884 100644
--- a/tests/test_oom_exception.py
+++ b/tests/test_oom_exception.py
@@ -19,7 +19,7 @@ class TestOOMException(unittest.TestCase):
         # make sure that allocing more than 10G will fail
         resource.setrlimit(resource.RLIMIT_AS, (10 * 1024 * 1024, hard_as))
         try:
-            x = faiss.IntVector()
+            x = faiss.Int32Vector()
             try:
                 x.resize(10**11)   # 400 G of RAM
             except MemoryError:
-- 
2.29.2.windows.3

