From c329c59103f90a9b5fcec98f7a71f1bba4a3edbc Mon Sep 17 00:00:00 2001
From: "H. Vetinari" <h.vetinari@gmx.com>
Date: Wed, 3 Feb 2021 08:00:39 -0800
Subject: [PATCH 06/19] make AVX2-detection platform-independent (#1600)

Summary:
In the context of https://github.com/conda-forge/faiss-split-feedstock/issues/23, I discussed with some of the conda-folks how we should support AVX2 (and potentially other builds) for faiss. In the meantime, we'd like to follow the model that faiss itself is using (i.e. build with AVX2 and without and then load the corresponding library at runtime depending on CPU capabilities).

Since windows support for this is missing (and the other stuff is also non-portable in `loader.py`), I chased down `numpy.distutils.cpuinfo`, which is pretty outdated, and opened: https://github.com/numpy/numpy/issues/18058

While the [private API](https://github.com/numpy/numpy/issues/18058#issuecomment-749852711) is obviously something that _could_ change at any time, I still think it's better than platform-dependent shenanigans.

Opening this here to ideally upstream this right away, rather than carrying patches in the conda-forge feedstock.

TODO:
* [ ] adapt conda recipe for windows in this repo to also build avx2 version

Pull Request resolved: https://github.com/facebookresearch/faiss/pull/1600

Reviewed By: beauby

Differential Revision: D25994705

Pulled By: mdouze

fbshipit-source-id: 9986bcfd4be0f232a57c0a844c72ec0e308fff19
---
 faiss/python/loader.py | 39 ++++++++++++++++++++++++++++++---------
 1 file changed, 30 insertions(+), 9 deletions(-)

diff --git a/faiss/python/loader.py b/faiss/python/loader.py
index ac016623..49601edf 100644
--- a/faiss/python/loader.py
+++ b/faiss/python/loader.py
@@ -3,30 +3,51 @@
 # This source code is licensed under the MIT license found in the
 # LICENSE file in the root directory of this source tree.
 
+from distutils.version import LooseVersion
 import platform
 import subprocess
 import logging
 
 
-def instruction_set():
+def supported_instruction_sets():
+    """
+    Returns the set of supported CPU features, see
+    https://github.com/numpy/numpy/blob/master/numpy/core/src/common/npy_cpu_features.h
+    for the list of features that this set may contain per architecture.
+
+    Example:
+    >>> supported_instruction_sets()  # for x86
+    {"SSE2", "AVX2", ...}
+    >>> supported_instruction_sets()  # for PPC
+    {"VSX", "VSX2", ...}
+    >>> supported_instruction_sets()  # for ARM
+    {"NEON", "ASIMD", ...}
+    """
+    import numpy
+    if LooseVersion(numpy.__version__) >= "1.19":
+        # use private API as next-best thing until numpy/numpy#18058 is solved
+        from numpy.core._multiarray_umath import __cpu_features__
+        # __cpu_features__ is a dictionary with CPU features
+        # as keys, and True / False as values
+        supported = {k for k, v in __cpu_features__.items() if v}
+        return supported
+
+    # platform-dependent legacy fallback before numpy 1.19, no windows
     if platform.system() == "Darwin":
         if subprocess.check_output(["/usr/sbin/sysctl", "hw.optional.avx2_0"])[-1] == '1':
-            return "AVX2"
-        else:
-            return "default"
+            return {"AVX2"}
     elif platform.system() == "Linux":
         import numpy.distutils.cpuinfo
         if "avx2" in numpy.distutils.cpuinfo.cpu.info[0].get('flags', ""):
-            return "AVX2"
-        else:
-            return "default"
+            return {"AVX2"}
+    return set()
 
 
 logger = logging.getLogger(__name__)
 
 try:
-    instr_set = instruction_set()
-    if instr_set == "AVX2":
+    has_AVX2 = "AVX2" in supported_instruction_sets()
+    if has_AVX2:
         logger.info("Loading faiss with AVX2 support.")
         from .swigfaiss_avx2 import *
     else:
-- 
2.29.2.windows.3

