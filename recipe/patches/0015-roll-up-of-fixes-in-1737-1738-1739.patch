From fb5ac8c74cdf99a3b8e28619e74e3a55faf0f204 Mon Sep 17 00:00:00 2001
From: "H. Vetinari" <h.vetinari@gmx.com>
Date: Fri, 5 Mar 2021 13:41:44 -0800
Subject: [PATCH 15/18] roll-up of fixes in #1737, #1738, #1739

---
 faiss/gpu/test/test_gpu_index.py | 7 +++++--
 faiss/impl/platform_macros.h     | 3 +++
 tests/test_index_accuracy.py     | 2 +-
 3 files changed, 9 insertions(+), 3 deletions(-)

diff --git a/faiss/gpu/test/test_gpu_index.py b/faiss/gpu/test/test_gpu_index.py
index d96bd13a..d5af7a46 100755
--- a/faiss/gpu/test/test_gpu_index.py
+++ b/faiss/gpu/test/test_gpu_index.py
@@ -61,8 +61,11 @@ class EvalIVFPQAccuracy(unittest.TestCase):
         index.train(xt)
         ts.append(time.time())
 
-        # adding some ids because there was a bug in this case
-        index.add_with_ids(xb, np.arange(nb) * 3 + 12345)
+        # adding some ids because there was a bug in this case;
+        # those need to be cast to idx_t(= int64_t), because
+        # on windows the numpy int default is int32
+        ids = (np.arange(nb) * 3 + 12345).astype('int64')
+        index.add_with_ids(xb, ids)
         ts.append(time.time())
 
         index.nprobe = 4
diff --git a/faiss/impl/platform_macros.h b/faiss/impl/platform_macros.h
index 1f4795c6..7efc9483 100644
--- a/faiss/impl/platform_macros.h
+++ b/faiss/impl/platform_macros.h
@@ -39,11 +39,14 @@ inline int __builtin_ctzll(uint64_t x) {
     return (int)ret;
 }
 
+// cudatoolkit provides __builtin_ctz for NVCC >= 11.0
+#if ! defined(__CUDACC__) || __CUDACC_VER_MAJOR__ < 11
 inline int __builtin_ctz(unsigned long x) {
     unsigned long ret;
     _BitScanForward(&ret, x);
     return (int)ret;
 }
+#endif
 
 inline int __builtin_clzll(uint64_t x) {
     return (int)__lzcnt64(x);
diff --git a/tests/test_index_accuracy.py b/tests/test_index_accuracy.py
index 5f3b557e..b5ee5138 100644
--- a/tests/test_index_accuracy.py
+++ b/tests/test_index_accuracy.py
@@ -723,7 +723,7 @@ class TestRefine(unittest.TestCase):
         # the original recall@100
         recall2 = (I2 == Iref[:, :1]).sum()
         # print("recalls", recall1, recall2)
-        self.assertEquals(recall1, recall2)
+        self.assertEqual(recall1, recall2)
 
     def test_IP(self):
         self.do_test(faiss.METRIC_INNER_PRODUCT)
-- 
2.29.2.windows.3

